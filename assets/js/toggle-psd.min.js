jQuery(document).ready(function() {
    TogglePSD = {}, TogglePSD.Utils = {
        getJSON: togglePSDModels,
        setCookie: function(sKey, sValue, vEnd, sPath, sDomain, bSecure) {
            if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) return !1;
            var sExpires = "";
            if (vEnd) switch (vEnd.constructor) {
              case Number:
                sExpires = 1/0 === vEnd ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
                break;

              case String:
                sExpires = "; expires=" + vEnd;
                break;

              case Date:
                sExpires = "; expires=" + vEnd.toUTCString();
            }
            return document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : ""), 
            !0;
        },
        getCookie: function(sKey) {
            return sKey ? decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null : null;
        }
    }, TogglePSD.dispatcher = _.clone(Backbone.Events), TogglePSD.Control = Backbone.Model.extend({
        defaults: {
            title: "",
            state: "hidden",
            loaded: !1,
            imageSource: ""
        },
        initialize: function() {
            console.log(this);
        },
        equals: function(model) {
            return this.cid == model.cid;
        }
    }), TogglePSD.ControlView = Backbone.View.extend({
        tagName: "li",
        className: "toggle-psd-node-container",
        events: {
            click: "toggle"
        },
        initialize: function() {
            this.onStateChange = _.bind(this.onStateChange, this), this.onStateChange(), this.listenTo(this.model, "change:state", this.onStateChange);
        },
        onStateChange: function() {
            console.log("onStateChange modelView");
            var model = this.model, state = model.get("state");
            "shown" === state ? this.$el.find(".toggle-psd-node").attr("data-state", "shown") : this.$el.find(".toggle-psd-node").attr("data-state", "hidden");
        },
        toggle: function() {
            var model = this.model, state = model.get("state");
            "shown" === state ? TogglePSD.dispatcher.trigger("toggledOff", this.model) : TogglePSD.dispatcher.trigger("toggledOn", this.model);
        }
    }), TogglePSD.TopLevelControl = Backbone.Model.extend({
        defaults: {
            state: "hidden"
        },
        initialize: function() {
            TogglePSD.dispatcher.on("toggledOn", this.onToggledOn, this), TogglePSD.dispatcher.on("toggledOff", this.onToggledOff, this);
        },
        onToggledOn: function() {
            this.set({
                state: "shown"
            });
        },
        onToggledOff: function() {
            this.set({
                state: "hidden"
            });
        }
    }), TogglePSD.TopLevelControlView = Backbone.View.extend({
        el: "#wp-admin-bar-toggle-psd",
        events: {
            "click .ab-item": "toggle"
        },
        initialize: function() {
            this.onStateChange = _.bind(this.onStateChange, this), this.onStateChange(), this.listenTo(this.model, "change:state", this.onStateChange);
        },
        onStateChange: function() {
            console.log("onStateChange modelView");
            var model = this.model, state = model.get("state");
            console.log(state), "shown" === state ? this.$el.attr("data-state", "shown") : this.$el.attr("data-state", "hidden");
        },
        toggle: function() {
            var modelId = TogglePSD.Utils.getCookie("psd-model");
            if (null !== modelId) {
                var model = this.collection.get(modelId), state = model.get("state");
                "shown" === state ? (TogglePSD.dispatcher.trigger("toggledOff", model), this.model.set({
                    state: "hidden"
                })) : (TogglePSD.dispatcher.trigger("toggledOn", model), this.model.set({
                    state: "shown"
                }));
            }
        }
    }), TogglePSD.Collection = Backbone.Collection.extend({
        model: TogglePSD.Control,
        initialize: function() {
            TogglePSD.dispatcher.on("toggledOn", this.onToggledOn, this), TogglePSD.dispatcher.on("toggledOff", this.onToggledOff, this);
        },
        onToggledOn: function(model) {
            console.log("onToggledOn collection");
            var pModel = model;
            TogglePSD.Utils.setCookie("psd-model", model.cid), this.each(function(model) {
                model.equals(pModel) ? pModel.set({
                    state: "shown"
                }) : "shown" === model.get("state") && model.set({
                    state: "hidden"
                });
            });
        },
        onToggledOff: function(model) {
            console.log("onToggledOff collection"), model.set({
                state: "hidden"
            });
        },
        createEachModel: function() {
            _.each(TogglePSD.Utils.getJSON, function(model) {
                var newModel = new TogglePSD.Control({
                    title: model.title,
                    imageSource: model.imageSource,
                    element: model.element
                });
                new TogglePSD.ControlView({
                    model: newModel,
                    el: model.element
                }), this.add(newModel);
            }, this);
        }
    }), TogglePSD.PSDView = Backbone.View.extend({
        tagName: "img",
        className: "overlay",
        events: {
            mousedown: "toggle"
        },
        initialize: function() {
            this.listenTo(this.model, "change:state", this.onStateChange);
        },
        onStateChange: function() {
            console.log("onStateChange PSDView");
            var model = this.model, state = model.get("state");
            "shown" === state ? this.$el.show() : this.$el.hide();
        },
        toggle: function(event) {
            if (3 == event.which) {
                var model = this.model;
                TogglePSD.dispatcher.trigger("toggledOff", model), setTimeout(function() {
                    TogglePSD.dispatcher.trigger("toggledOn", model);
                }, 3e3);
            }
        },
        render: function() {
            this.onStateChange();
            var src = this.model.get("imageSource"), width = this.$el.width();
            marginLeft = "-" + width / 2 + "px", this.$el.attr("src", src).css("margin-left", marginLeft);
        }
    }), TogglePSD.PSDCollectionView = Backbone.View.extend({
        el: "html",
        collection: null,
        events: {
            keypress: "toggle"
        },
        toggle: function(event) {
            if (96 === event.charCode) {
                var modelId = TogglePSD.Utils.getCookie("psd-model");
                if (null === modelId) return;
                var model = this.collection.get(modelId), state = model.get("state");
                "shown" === state ? (TogglePSD.dispatcher.trigger("toggledOff", model), model.set({
                    state: "hidden"
                })) : (TogglePSD.dispatcher.trigger("toggledOn", model), model.set({
                    state: "shown"
                }));
            }
        },
        initialize: function(options) {
            this.collection = options.collection, this.psdViews = [], this.createPSDViews();
        },
        createPSDViews: function() {
            console.log(this.collection), this.collection.each(function(model) {
                this.psdViews.push(new TogglePSD.PSDView({
                    model: model
                }));
            }, this);
        },
        render: function() {
            _.each(this.psdViews, function(view) {
                this.$el.append(view.$el), view.render();
            }, this);
        }
    });
    var collection = new TogglePSD.Collection();
    collection.createEachModel();
    var view = new TogglePSD.PSDCollectionView({
        collection: collection
    }), model = new TogglePSD.TopLevelControl();
    new TogglePSD.TopLevelControlView({
        model: model,
        collection: collection
    }), view.render();
});